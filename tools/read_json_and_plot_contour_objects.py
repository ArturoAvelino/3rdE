import json
import matplotlib.pyplot as plt
from pathlib import Path


def read_json_plot_contours(json_file_path, output_path=None, no_margins=False):
    """
    Code to read and create a 2D plot a JSON file having a structure
    generated by the command line "coco_tkit svg2coco".

    The "segmentation" section corresponds to the location of pixels in an
    image, where the first and second rows correspond to the x and y axis
    values of the first pixel, the third and fourth rows correspond to the x
    and y axis values of the second pixel, and so on.

    Args:
        json_file_path: Path to the JSON file containing segmentation data
        output_path: Path where to save the plot (optional)
        no_margins: If True, creates plot without margins, borders, axes, or decorations (default: False)

    These kind of JSON files look like this:
    {
        "images": [
            {
                "id": 1,
                "file_name": "capt0044.jpg",
                "height": 4000,
                "width": 6000
            }
        ],
        "annotations": [
            {
                "id": 1,
                "segmentation": [
                    [
                      1539,
                      3889,
                      1540,
                      3888,
                      1541,
                      3888,
                      AND SO ON.
                    ]
                ],
                "image_id": 1,
                "iscrowd": 0,
                "bbox": [
                    1479,
                    3888,
                    113,
                    112
                ],
                "area": 12656,
                "category_id": 1
            },
            {
                AND SO ON.
            }
        ],
        "categories": [
            {
                "id": 1,
                "name": "Organism",
                "supercategory": ""
            }
        ],
        "type": "",
        "licenses": "",
        "info": ""
    }
    """
    # Read the JSON file
    with open(json_file_path, 'r') as f:
        data = json.load(f)

    # Create a figure with a fixed size
    plt.figure(figsize=(15, 10))  # Make it square and reasonable size

    # Initialize min/max values for axis scaling
    x_min, x_max, y_min, y_max = float('inf'), float('-inf'), float(
        'inf'), float('-inf')

    # Plot segmentations for each annotation
    for annotation in data['annotations']:
        segments = annotation['segmentation'][0]
        x_coords = segments[::2]
        y_coords = segments[1::2]

        # Update min/max values
        x_min = min(x_min, min(x_coords))
        x_max = max(x_max, max(x_coords))
        y_min = min(y_min, min(y_coords))
        y_max = max(y_max, max(y_coords))

        plt.scatter(x_coords, y_coords, s=4,
                    label=f'Object {annotation["id"]}')  # s=4 sets marker size

    if no_margins:
        # Set axis limits without any margins - exact data bounds
        plt.xlim(x_min, x_max)
        plt.ylim(y_max, y_min)  # Reversed for image coordinates

        # Remove all decorations for a clean plot
        plt.axis('off')  # Turn off axis
        plt.subplots_adjust(left=0, right=1, top=1, bottom=0)  # Remove margins
    else:
        # Set axis limits with a small margin (original behavior)
        margin = 0.05  # 5% margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        plt.xlim(x_min - margin * x_range, x_max + margin * x_range)
        # Reversed for image coordinates:
        plt.ylim(y_max + margin * y_range, y_min - margin * y_range)

        # Customize the plot
        plt.title('Segmentation Coordinates')
        plt.xlabel('X coordinate')
        plt.ylabel('Y coordinate')
        # Move legend outside:
        # plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.grid(True, alpha=0.3)  # Lighter grid

        # Make layout tight before saving
        plt.tight_layout()

    # Save the figure if output_path is provided
    if output_path:
        output_path = Path(output_path)

        # If output_path is a directory, create a filename based on the JSON file
        if output_path.is_dir():
            json_stem = Path(json_file_path).stem
            suffix = "_contours_no_margins" if no_margins else "_contours"
            output_path = output_path / f"{json_stem}{suffix}.png"

        # Ensure the output directory exists
        output_path.parent.mkdir(parents=True, exist_ok=True)

        # Get the file extension and determine format
        file_extension = output_path.suffix.lower()
        if file_extension:
            # Remove the dot from the extension
            format_str = file_extension[1:]
            # Map some common extensions to matplotlib format names
            format_mapping = {
                'jpg': 'jpeg',
                'tif': 'tiff'
            }
            format_str = format_mapping.get(format_str, format_str)
        else:
            # Default to PNG if no extension
            format_str = 'png'
            output_path = output_path.with_suffix('.png')

        # Save with appropriate parameters based on no_margins setting
        if no_margins:
            plt.savefig(output_path, dpi=300, bbox_inches='tight',
                        pad_inches=0, format=format_str)
        else:
            plt.savefig(output_path, dpi=300, bbox_inches='tight',
                        format=format_str)

    # plt.show()
    plt.close()


# ------------------------------------------------------------------------------
# Example usage:

# json_path = '/Users/aavelino/Downloads/images/BM4_E/BM4_E.json'
# output_path = Path('/Users/aavelino/Downloads/images/BM4_E/outputs/BM4_E.png')

# json_path = '/Users/aavelino/Downloads/images/Guillaume/2025_05_15/im44.json'
# output_path = Path('/Users/aavelino/Downloads/images/Guillaume/2025_05_15/output/im44.png')

json_path = '/Users/aavelino/Downloads/images/BM4_E_sandbox/For_Robin/capt0053_segmentation/capt0053_combined_metadata.json'
output_path = Path(
    '/Users/aavelino/Downloads/images/BM4_E_sandbox/For_Robin/capt0053_segmentation')

read_json_plot_contours(json_path, output_path, no_margins=True)